/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.openapitools.model.User;
import org.openapitools.model.Video;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-16T17:45:57.620163600+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "home", description = "Endpoints de recomendaciones generales y personalizadas")
public interface HomeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }


    
    /**
     * GET /home/genres : Recomendaciones por género
     * Obtiene una lista de videos recomendados por género.
     *
     * @param genre Género para filtrar los videos (required)
     * @return Lista de videos filtrados por género obtenida exitosamente (status code 200)
     *         or Género no válido (status code 400)
     *         or Error al obtener los videos por género (status code 500)
     */
    @Operation(
        operationId = "getVideosByGenre",
        summary = "Recomendaciones por género",
        description = "Obtiene una lista de videos recomendados por género.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos filtrados por género obtenida exitosamente", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Género no válido"),
            @ApiResponse(responseCode = "500", description = "Error al obtener los videos por género")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/genres/{genero}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> getVideosByGenre(
        @NotNull @Parameter(name = "genre", description = "Género para filtrar los videos", required = true, in = ParameterIn.PATH) @Valid @PathVariable("genero") String genre
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /home/search/{search} : Búsqueda de videos por título
     * Busca videos por título y devuelve resultados coincidentes.
     *
     * @param title Título del video a buscar (required)
     * @return Lista de videos coincidentes con el título (status code 200)
     *         or Parámetro de título no válido (status code 400)
     *         or No se encontraron videos coincidentes (status code 404)
     *         or Error al realizar la búsqueda (status code 500)
     */
    @Operation(
        operationId = "searchVideosByTitle",
        summary = "Búsqueda de videos por título",
        description = "Busca videos por título y devuelve resultados coincidentes.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de videos coincidentes con el título", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Video.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Parámetro de título no válido"),
            @ApiResponse(responseCode = "404", description = "No se encontraron videos coincidentes"),
            @ApiResponse(responseCode = "500", description = "Error al realizar la búsqueda")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/search/{query}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Video>> searchVideosByTitle(
        @NotNull @Parameter(name = "title", description = "Título del video a buscar", required = true, in = ParameterIn.PATH) @Valid @PathVariable("query") String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }, { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
    
    /**
     * GET /home/history : Obtener el historial de videos de un usuario
     * Devuelve una lista de videos que el usuario ha visto.
     *
     * @param username El nombre de usuario cuyo historial de videos se desea obtener (required)
     * @return Lista de videos del historial del usuario (status code 200)
     *         or Nombre de usuario no válido (status code 400)
     *         or No se encontraron videos (status code 404)
     *         or Error al obtener el historial de videos (status code 500)
     */
    @Operation(
        operationId = "getUserVideoHistory",
        summary = "Obtener el historial de videos de un usuario",
        description = "Devuelve una lista de videos que el usuario ha visto, según su historial.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Historial de videos del usuario", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Video.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nombre de usuario no válido"),
            @ApiResponse(responseCode = "404", description = "No se encontraron videos para el usuario"),
            @ApiResponse(responseCode = "500", description = "Error al obtener el historial de videos")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/home/{username}/history",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getUserVideoHistory(
        @NotNull @Parameter(name = "username", description = "Nombre del usuario", required = true, in = ParameterIn.QUERY) 
        @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/video/{id}/views : Obtiene el número de views de un video por su ID.
     *
     * @param id ID del video
     * @return Número de views del video especificado (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Video not found (status code 404)
     */
    @Operation(
        operationId = "countViewsByVideoId",
        summary = "Obtiene el número de views de un video por su ID",
        description = "Devuelve el total de views que tiene el video especificado por su ID.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @GetMapping(
        value = "/home/video/{id}/views",
        produces = { "application/json" }
    )
    default ResponseEntity<Long> countViewsByVideoId(
      @NotNull @Parameter(name = "id", description = "ID del video para el cual contar los views", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id

    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/topVideos : Obtiene el top de videos ordenados por número de vistas.
     *
     * @return Lista de videos ordenados por número de vistas (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getTopVideos",
        summary = "Obtiene el top de videos ordenados por número de vistas",
        description = "Devuelve una lista de videos ordenados de mayor a menor según el número de vistas.",
        tags = { "home" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/home/topVideos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getTopVideos() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/user/{username}/recommendations : Obtiene recomendaciones de videos para un usuario específico.
     *
     * @param username Nombre de usuario para el cual se generan las recomendaciones
     * @return Lista de videos recomendados para el usuario (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getRecommendationsByUsername",
        summary = "Obtiene recomendaciones de videos para un usuario específico",
        description = "Devuelve una lista de videos recomendados basada en el nombre de usuario proporcionado.",
        tags = { "home", "recommendations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/home/user/{username}/recommendations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getRecommendationsByUsername(
        @NotNull @Parameter(name = "username", description = "Nombre de usuario para el cual se generan las recomendaciones", required = true, in = ParameterIn.PATH) 
        @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/user/{username}/following : Obtiene videos de los usuarios que sigue un usuario específico.
     *
     * @param username Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos
     * @return Lista de videos de los usuarios seguidos (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getVideosByFollowing",
        summary = "Obtiene videos de los usuarios que sigue un usuario específico",
        description = "Devuelve una lista de videos de los usuarios que el usuario proporcionado sigue.",
        tags = { "home", "following" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/home/user/{username}/following",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Video>> getVideosByFollowing(
        @NotNull @Parameter(name = "username", description = "Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos", required = true, in = ParameterIn.PATH) 
        @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/user/{username}/followingProfiles : Obtiene usuarios seguidos de los que sigue un usuario específico.
     *
     * @param username Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos
     * @return Lista de videos de los usuarios seguidos (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getProfilesByFollowing",
        summary = "Obtiene los usuarios que sigue un usuario específico",
        description = "Devuelve una lista de videos de los usuarios que el usuario proporcionado sigue.",
        tags = { "home", "following" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/home/user/{username}/followingProfiles",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getProfilesByFollowing(
        @NotNull @Parameter(name = "username", description = "Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos", required = true, in = ParameterIn.PATH) 
        @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    /**
     * GET /home/user/{username}/followingProfiles : Obtiene usuarios seguidos de los que no sigue un usuario específico.
     *
     * @param username Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos
     * @return Lista de videos de los usuarios seguidos (status code 200)
     *         or Usuario no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getProfilesByNotFollowing",
        summary = "Obtiene los usuarios que no sigue un usuario específico",
        description = "Devuelve una lista de videos de los usuarios que el usuario proporcionado sigue.",
        tags = { "home", "following" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor")
        }
    )
    @GetMapping(
        value = "/home/user/{username}/notfollowingProfiles",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getProfilesByNotFollowing(
        @NotNull @Parameter(name = "username", description = "Nombre de usuario para el cual se obtienen los videos de los usuarios seguidos", required = true, in = ParameterIn.PATH) 
        @PathVariable("username") String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }



}
